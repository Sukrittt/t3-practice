import { type NextPage } from "next";
import { useState } from "react";
import { useUser } from "@clerk/nextjs";
import Head from "next/head";
import Link from "next/link";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime);

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import Image from "next/image";
import { LoadingPage } from "~/components/loading";

const CreatePostWizard = () => {
  const { user } = useUser();
  const [input, setInput] = useState("");

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
    },
  });

  if (!user) {
    return null;
  }

  return (
    <div className="flex w-full gap-x-3">
      <Image
        src={user.profileImageUrl}
        alt="profile image"
        className="rounded-full"
        height={56}
        width={56}
      />
      <input
        placeholder="Type some emogis!"
        className="disabled:bg-opacity/70 grow rounded-md bg-transparent px-2 transition focus:outline-none disabled:cursor-not-allowed"
        value={input}
        type="text"
        disabled={isPosting}
        onChange={(e) => setInput(e.target.value)}
      />
      <button
        onClick={() => mutate({ content: input })}
        className="transition hover:text-slate-300"
      >
        Post
      </button>
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  const { post, author } = props;

  return (
    <div className="flex items-center gap-x-2 border-b border-slate-400 px-4 py-8">
      <Image
        src={author.profileImageUrl}
        alt={`@${author.username}'s profile picture`}
        className="rounded-full"
        height={56}
        width={56}
      />
      <div className="flex flex-col">
        <div className="flex gap-x-2 text-slate-300 ">
          <span>{`@${author.username}`}</span>
          <span className="font-thin">{`Â· ${dayjs(
            post.createdAt
          ).fromNow()}`}</span>
        </div>

        <span className="text-2xl">{post.content}</span>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postLoading } = api.posts.getAll.useQuery();

  if (postLoading) return <LoadingPage />;
  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="space-y-4">
      <h1 className="mt-2 text-center text-5xl font-extrabold">Posts</h1>
      <div className="flex flex-col ">
        {data.map((fullPost) => (
          <PostView key={fullPost.post.id} {...fullPost} />
        ))}
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  //Start fetching asap and use cached data hereafter
  api.posts.getAll.useQuery();

  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="w-full border-x border-slate-400 md:max-w-2xl ">
          <div className="border-b border-slate-400 p-4">
            {isSignedIn ? (
              <CreatePostWizard />
            ) : (
              <Link
                href="sign-in"
                className="rounded-md bg-black p-2 text-white"
              >
                Sign in
              </Link>
            )}
          </div>

          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
